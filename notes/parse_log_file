# Parsing a log file

## Opening a file

Python includes the open() function for open files and returning a file object. The default filemode is read, other modes include "w" for write and "a" for append.

```python
f = open("/file/path/file.log", "r")
f.read()
f.close()
```

Using the with statement makes the code cleaner.

```python
with open("/file/path/file.log", "r") as f:
    f.read()
```

## Reading the file

The read method will load the whole file into a string object. This is ok in some cases but generally not ideal for analysing a log file.

```python
with open("/file/path/file.log", "r") as f:
    lines = f.read()
```

The readlines method will load all lines into a list. Now the data is a list of string its easier to analyse.

```python
with open("/file/path/file.log", "r") as f:
    lines = f.readlines()
```

This does however have the consequence that it loads the whole file into memory. Not ideal if you've got a log file in GB's.

The readline method loads a single line at a time making it more suitable for reading files.

```python
with open("/file/path/file.log", "r") as f:
        line = f.readline()
        while line != "": # The EOF char is an empty string
            print(line)
            line = f.readline()

```

The cleanest method however is to simply loop over the file object.

```python
with open("/file/path/file.log", "r") as f:
    for line in f:
        if "ERROR" in line:
            print(line)
```

## Handling file contents

Typically when handing log files we need to search or filter for a pattern and then split or extract the data.

```split()``` splits a string into a list. A string can be split by any character. The character to use will depend on the structure of the file but common examples are comma, newline or whitespace. 

```python
line.split()
```

Slice the line at fixed indexs or combine with the string method ```rfind()``` which returns the highest index of a substring. 

```python
end = line.rfind(".GIF")
start = line.rfind("/")
filename = line[start:end]
```


## Extract data
```python
with open("./wifi.log") as reader, open("./wifi_errors.log", "w") as writer:
    for line in reader:
        if "ERROR" in line:
            writer.write(line[line.rfind("ERROR:"):])
```

## Replace a pattern

findall() finds all matches.

search() stops at the first match.


03/22 08:53:52 INFO   :.......rsvp_flow_stateMachine: state RESVED, event RESV
03/22 08:53:52 TRACE  :........flow_timer_stop: Stop T4
03/22 08:53:52 TRACE  :........flow_timer_start: Start T4
03/22 08:53:52 TRACE  :.......rsvp_flow_stateMachine: reentering state RESVED
03/22 08:53:53 EVENT  :..mailslot_sitter: process received signal SIGALRM
03/22 08:53:53 TRACE  :.....event_timerT1_expire: T1 expired
03/22 08:53:53 INFO   :......router_forward_getOI: Ioctl to query route entry successful
03/22 08:53:53 TRACE  :......router_forward_getOI:         source address:   9.67.116.98
03/22 08:53:53 TRACE  :......router_forward_getOI:         out inf:   9.67.116.98
03/22 08:53:53 TRACE  :......router_forward_getOI:         gateway:   0.0.0.0
03/22 08:53:53 TRACE  :......router_forward_getOI:         route handle:   7f5251c8
03/22 08:53:53 INFO   :......rsvp_flow_stateMachine: state RESVED, event T1OUT


